{"version":3,"file":"stringExt.test.js","sourceRoot":"","sources":["stringExt.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport \"../src/stringExt\";\n\nsuite(\"StringExt\", () =>\n{\n    suite(\"isEmptyOrWhiteSpace\", () =>\n    {\n        test(\"should return true when called on an empty string\", () =>\n        {\n            let target = \"\";\n            \n            let result = target.isEmptyOrWhiteSpace();\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return true when called on a non-empty string with space characters\", () =>\n        {\n            let target = \"   \";\n            \n            let result = target.isEmptyOrWhiteSpace();\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return false when called on a non-empty string\", () =>\n        {\n            let target = \"foo\";\n            \n            let result = target.isEmptyOrWhiteSpace();\n            \n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return false when called on a non-empty string with space and regular characters\", () =>\n        {\n            let target = \"  foo bar  \";\n            \n            let result = target.isEmptyOrWhiteSpace();\n            \n            assert.strictEqual(result, false);\n        });\n    });\n    \n    suite(\"contains\", () =>\n    {\n        test(\"should return true if argument is a substring of the target string\", () =>\n        {\n            let target = \"foo bar\";\n            let arg = \"bar\";\n            \n            let result = target.contains(arg);\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return false if argument is not a substring of the target string\", () =>\n        {\n            let target = \"foo bar\";\n            let arg = \"baz\";\n            \n            let result = target.contains(arg);\n            \n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return false if argument is partially of the target string\", () =>\n        {\n            let target = \"foo bar\";\n            let arg = \"foo baz\";\n\n            let result = target.contains(arg);\n\n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return true if argument is a space character in the target string\", () =>\n        {\n            let target = \"foo bar\";\n            let arg = \" \";\n            \n            let result = target.contains(arg);\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return true if argument is an empty string of the target string\", () =>\n        {\n            let target = \"foo bar\";\n            let arg = \"\";\n            \n            let result = target.contains(arg);\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return true if argument and target string are both empty\", () =>\n        {\n            let target = \"\";\n            let arg = \"\";\n            \n            let result = target.contains(arg);\n            \n            assert.strictEqual(result, true);\n        });\n    });\n    \n    suite(\"startsWith\", () =>\n    {\n        test(\"should return true if the first character in the target string matches the argument\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"F\";\n            \n            let result = target.startsWith(arg);\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return false if the first character in the target string does not match the argument\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"A\";\n            \n            let result = target.startsWith(arg);\n            \n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return false if the the first character in the target string is not the same capitalization as the argument\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"f\";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return true if first character in the target string does not match the argument that is an empty string\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"\";\n            \n            let result = target.startsWith(arg);\n            \n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return false if the first character in the target string does not match the argument that is a space character\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \" \";\n            \n            let result = target.startsWith(arg);\n            \n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return false if the target string is an empty string and the argument has a single character\", () =>\n        {\n            let target = \"\";\n            let arg = \"a\";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return false if target string is a space character and the argument is a non space character\", () =>\n        {\n            let target = \" \";\n            let arg = \"a\";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return true if all characters in the target string start with all the characters in the argument string\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"Foo\";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return false if target string starts with a space character and the argument has a non space character\", () =>\n        {\n            let target = \" Foo\";\n            let arg = \"F\";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n        \n        test(\"should return true if target string is a space character and the argument is a non space character\", () =>\n        {\n            let target = \" \";\n            let arg = \"\";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, true);\n        });\n        \n        test(\"should return false if target is an empty string and the argument is a space character\", () =>\n        {\n            let target = \"\";\n            let arg = \" \";\n\n            let result = target.startsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n    });\n    \n    suite(\"endsWith\", () =>\n    {\n        test(\"should return true if the last character in the target string matches the argument\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"o\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, true);\n        });\n\n        test(\"should return false if the last character in the target string does not match the argument\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"a\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return false if the the last character in the target string is not the same capitalization as the argument\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"O\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return true if last character in the target string does not match the argument that is an empty string\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, true);\n        });\n\n        test(\"should return false if the last character in the target string does not match the argument that is a space character\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \" \";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return false if the target string is an empty string and the argument has a single character\", () =>\n        {\n            let target = \"\";\n            let arg = \"a\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return false if target string is a space character and the argument is a non space character\", () =>\n        {\n            let target = \" \";\n            let arg = \"a\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return true if all characters in the target string end with all the characters in the argument string\", () =>\n        {\n            let target = \"Foo\";\n            let arg = \"Foo\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, true);\n        });\n\n        test(\"should return false if target string ends with a space character and the argument has a non space character\", () =>\n        {\n            let target = \"Foo \";\n            let arg = \"o\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n\n        test(\"should return true if target string is a space character and the argument is a non space character\", () =>\n        {\n            let target = \" \";\n            let arg = \"\";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, true);\n        });\n\n        test(\"should return false if target is an empty string and the argument is a space character\", () =>\n        {\n            let target = \"\";\n            let arg = \" \";\n\n            let result = target.endsWith(arg);\n\n            assert.strictEqual(result, false);\n        });\n    });\n    \n    suite(\"extractNumbers\", () =>\n    {\n        test(\"should return empty string when target string contains no numbers\", () =>\n        {\n            let target = \"abc\";\n            \n            let result = target.extractNumbers();\n            \n            assert.strictEqual(result, \"\");\n        });\n        \n        test(\"should return numbers when target string has numbers at the beginning\", () =>\n        {\n            let target = \"123abc\";\n            \n            let result = target.extractNumbers();\n            \n            assert.strictEqual(result, \"123\");\n        });\n        \n        test(\"should return numbers when target string has numbers at the end\", () =>\n        {\n            let target = \"abc123\";\n            \n            let result = target.extractNumbers();\n            \n            assert.strictEqual(result, \"123\");\n        });\n        \n        test(\"should return numbers when target string has numbers in the middle\", () =>\n        {\n            let target = \"abc123abc\";\n            \n            let result = target.extractNumbers();\n            \n            assert.strictEqual(result, \"123\");\n        });\n        \n        test(\"should return all numbers when target string has numbers scattered throught\", () =>\n        {\n            let target = \"1a2b3c\";\n            \n            let result = target.extractNumbers();\n            \n            assert.strictEqual(result, \"123\");\n        });\n        \n    });\n    \n    suite(\"format\", () =>\n    {\n        test(\"should return formated string with arguments in order\", () =>\n        {\n            let target = \"my name is {0} {1}\";  \n            \n            let result = target.format(\"Viola\", \"Deluca\");\n            \n            assert.strictEqual(result, \"my name is Viola Deluca\");\n        });\n        \n        test(\"should return formated string containing only first argument twice\", () =>\n        {\n            let target = \"my name is {0} {0}\";\n\n            let result = target.format(\"Viola\", \"Deluca\");\n\n            assert.strictEqual(result, \"my name is Viola Viola\");\n        });\n\n        test(\"should return formated string with arguments in reverse order\", () =>\n        {\n            let target = \"my name is {1} {0}\";\n\n            let result = target.format(\"Viola\", \"Deluca\");\n\n            assert.strictEqual(result, \"my name is Deluca Viola\");\n        });\n\n        test(\"should return formated string containing only first argument, leaving {2} unchanged\", () =>\n        {\n            let target = \"my name is {0} {2}\";\n\n            let result = target.format(\"Viola\", \"Deluca\");\n\n            assert.strictEqual(result, \"my name is Viola {2}\");\n        });\n        \n        test(\"should return an empty string if target is an empty string and argument has value\", () =>\n        {\n            let target = \"\";\n\n            let result = target.format(\"Viola\", \"Deluca\");\n\n            assert.strictEqual(result, \"\");\n        });\n        \n        test(\"should return original target unformated when target provides no placeholders\", () =>\n        {\n            let target = \"my name is\";\n\n            let result = target.format(\"Viola\", \"Deluca\");\n\n            assert.strictEqual(result, \"my name is\");\n        });\n        \n        test(\"should return formated string with placeholder replaced by empty string if target has placeholders and argument provided is an empty string\", () =>\n        {\n            let target = \"my name is {0} {1}\";\n\n            let result = target.format(\"\");\n\n            assert.strictEqual(result, \"my name is  {1}\");\n        });\n        \n        test(\"should return original string if target has placeholders but no arguments are provided\", () =>\n        {\n            let target = \"my name is {0} {1}\";\n\n            let result = target.format();\n\n            assert.strictEqual(result, \"my name is {0} {1}\");\n        });\n        \n        test(\"should return formated string with first two arguments when there are more arguments than placeholders\", () =>\n        {\n            let target = \"my name is {0} {1}\";\n\n            let result = target.format(\"Viola\", \"Deluca\", \"Nivin\", \"Joseph\");\n\n            assert.strictEqual(result, \"my name is Viola Deluca\");\n        });\n        \n        test(\"should return formated string with only first placeholder changed given a single argument\", () =>\n        {\n            let target = \"my name is {0} {1}\";\n\n            let result = target.format(\"Viola\");\n\n            assert.strictEqual(result, \"my name is Viola {1}\");\n        });\n    });\n});"]}