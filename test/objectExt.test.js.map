{"version":3,"file":"objectExt.test.js","sourceRoot":"","sources":["objectExt.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport \"../src/objectExt\";\n\nsuite(\"ObjectExt\", () =>\n{\n    suite(\"mapToObject\", () =>\n    {\n        let original: any;\n        let mapped: any;\n        \n        setup(() =>\n        {\n            original = {\n                name: \"Keanu\",\n                address: {\n                    street: \"15 Benton rd\",\n                    province: \"ON\"\n                }\n            };\n\n            mapped = original.mapToObject(() => ({}));\n        });\n        \n        teardown(() =>\n        {\n            original = null;\n            mapped = null;\n        });\n        \n        test(\"original should not be the same object as mapped\", () =>\n        {\n            assert.notStrictEqual(mapped, original); \n        });\n        \n        test(\"original primitive properties and mapped primitive properties should have the same value\", () =>\n        {\n            assert.strictEqual(mapped.name, original.name);\n        });\n        \n        test(\"original object properties and mapped object properties should not be the same reference\", () => \n        {\n            assert.notStrictEqual(mapped.address, original.address);\n        });\n        \n        test(\"primitive properties on original and mapped object properties must have the same value\", () =>\n        {\n            assert.strictEqual(mapped.address.street, original.address.street);\n            assert.strictEqual(mapped.address.province, original.address.province);\n        });\n    });\n    \n    suite(\"getTypeName\", () =>\n    {\n        let val: Object = null;\n        let typeName: string = null;\n        \n        teardown(() =>\n        {\n            val = null;\n            typeName = null;\n        });\n        \n        test(\"should return 'Number' for number instance\", () =>\n        {\n            val = 1;\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Number\");\n        });\n        \n        test(\"should return 'Boolean' for bool instance\", () =>\n        {\n            val = true;\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Boolean\");\n        });\n        \n        test(\"should return 'String' for string instance\", () =>\n        {\n            val = \"value\";\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"String\");\n        });\n        \n        test(\"should return 'Array' for array instance\", () =>\n        {\n            val = [];\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Array\");\n        });\n        \n        test(\"should return 'Date' for Date instance\", () =>\n        {\n            val = new Date();\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Date\");\n        });\n        \n        test(\"should return 'Object' for object literal instance\", () =>\n        {\n            val = {}; \n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Object\");\n        });\n        \n        test(\"should return name of the class for custom class instance\", () =>\n        {\n            class Foo { }\n            val = new Foo();\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Foo\");\n        });\n        \n        test(\"should return the name of the instantiated derived class for custom class instance\", () =>\n        {\n            class Foo { }\n            class Bar extends Foo { }\n            val = new Bar();\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Bar\");\n        });\n        \n        test(\"should return empty string for an arrow function\", () =>\n        {\n            val = () => \"foo\";\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"\");\n        });\n        \n        test(\"should return empty string for an anonymous function\", () =>\n        {\n            val = function () { };\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"\");\n        });\n        \n        test(\"should return name of the function for a named function\", () =>\n        {\n            val = function foo() { };\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"foo\");\n        });\n        \n        test(\"should return class name for a class object\", () =>\n        {\n            class Foo { }\n            class Bar extends Foo { }\n            val = Bar;\n            typeName = val.getTypeName();\n            assert.strictEqual(typeName, \"Bar\");\n        });\n    });\n    \n    suite(\"getValue\", () =>\n    {\n        let targetCountry: Object = null;\n        let targetAddress: Object = null;\n        let target: Object = null;\n        \n        setup(() =>\n        {\n            targetCountry =\n                {\n                    name: \"Canada\",\n                    code: \"CA\"\n                };\n            \n            targetAddress =\n                {\n                    street: \"711 Kennedy rd\",\n                    city: \"Toronto\",\n                    country: targetCountry\n                };\n            \n            target =\n                {\n                    firstName: \"John\",\n                    lastName: \"Smith\",\n                    address: targetAddress\n                };\n        });\n         \n        teardown(() =>\n        {\n            targetCountry = null;\n            targetAddress = null;\n            target = null;\n        });\n        \n        test(\"should return the target object if the key is null\", () =>\n        {\n            let key: string = null;\n            let value = target.getValue(key);\n            assert.strictEqual(value, target);\n        });\n        \n        test(\"should return the target object if the key is an empty string\", () =>\n        {\n            let key = \"\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, target);\n        });\n        \n        test(\"should return the target object if the key is a string with just whitespace\", () =>\n        {\n            let key = \"  \";\n            let value = target.getValue(key);\n            assert.strictEqual(value, target);\n        });\n        \n        test(\"should return null if the key does not exist on the target object\", () =>\n        {\n            let key = \"something\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, null);\n        });\n        \n        test(\"should return value if the key exists on the target object\", () =>\n        {\n            let key = \"firstName\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, \"John\");\n        });\n        \n        test(\"should return value if the multi level key exists on the target object\", () =>\n        {\n            let key = \"address.country\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, targetCountry);\n        });\n        \n        test(\"should return value if the multi level (3 levels) key exists on the target object\", () =>\n        {\n            let key = \"address.country.code\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, \"CA\");\n        });\n        \n        test(\"should return null if the top level of a multi level key does not exist on the target object\", () =>\n        {\n            let key = \"something.country\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, null);\n        });\n        \n        test(\"should return null if the middle level of a multi level key does not exist on the target object\", () =>\n        {\n            let key = \"address.something.code\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, null);\n        });\n        \n        test(\"should return null if the bottom level of a multi level key does not exist on the target object\", () =>\n        {\n            let key = \"address.country.something\";\n            let value = target.getValue(key);\n            assert.strictEqual(value, null);\n        });\n    });\n    \n    suite(\"setValue\", () =>\n    {\n        let targetCountry: Object = null;\n        let targetAddress: Object = null;\n        let target: Object = null;\n        let targetString: string = null;\n        \n        let getCurrentTargetString = () => JSON.stringify(target);\n\n        setup(() =>\n        {\n            targetCountry =\n                {\n                    name: \"Canada\",\n                    code: \"CA\"\n                };\n\n            targetAddress =\n                {\n                    street: \"711 Kennedy rd\",\n                    city: \"Toronto\",\n                    country: targetCountry\n                };\n\n            target =\n                {\n                    firstName: \"John\",\n                    lastName: \"Smith\",\n                    address: targetAddress\n                };\n            \n            targetString = JSON.stringify(target);\n        });\n\n\n        teardown(() =>\n        {\n            targetCountry = null;\n            targetAddress = null;\n            target = null;\n            targetString = null;\n        });\n        \n        test(\"should not do anything if the key is null\", () =>\n        {\n            let key = null;\n            target.setValue(key, \"some val\");\n            assert.strictEqual(getCurrentTargetString(), targetString);\n        });\n        \n        test(\"should not do anything if the key is an empty string\", () =>\n        {\n            let key = \"\";\n            target.setValue(key, \"some val\");\n            assert.strictEqual(getCurrentTargetString(), targetString);\n        });\n        \n        test(\"should not do anything if the key is a string with just whitespace\", () =>\n        {\n            let key = \"  \";\n            target.setValue(key, \"some val\");\n            assert.strictEqual(getCurrentTargetString(), targetString);\n        });\n        \n        test(\"should set value given a key that is a single level key\", () =>\n        {\n            let key = \"firstName\";\n            let value = \"Kevin\";\n            target.setValue(key, value);\n            assert.strictEqual(target[key], value);\n        });\n        \n        test(\"should set value given a multi level key\", () =>\n        {\n            let key = \"address.country.code\";\n            let value = \"us\";\n            target.setValue(key, value);\n            assert.strictEqual((<any>target).address.country.code, value);\n        });\n        \n        test(\"should set value given a single level key even if key does not already exist on the object\", () =>\n        {\n            let key = \"nickName\";\n            let value = \"Johnny\";\n            target.setValue(key, value);\n            assert.strictEqual((<any>target).nickName, value);\n        });\n        \n        test(\"should set value given a multi level key even if the bottom level key does not already exist on the object\", () =>\n        {\n            let key = \"address.country.language\";\n            let value = \"en-ca\";\n            target.setValue(key, value);\n            assert.strictEqual((<any>target).address.country.language, value);\n        });\n        \n        test(\"should set value given a multi level key even if the middle level key does not already exist on the object\", () =>\n        {\n            let key = \"address.province.name\";\n            let value = \"Ontario\";\n            target.setValue(key, value);\n            assert.strictEqual((<any>target).address.province.name, value);\n        });\n        \n        test(\"should set value given a multi level key even of none of the key levels already exist on the object\", () =>\n        {\n            let key = \"shippingAddress.province.name\";\n            let value = \"Quebec\";\n            target.setValue(key, value);\n            assert.strictEqual((<any>target).shippingAddress.province.name, value);\n        });\n    });\n});"]}