{"version":3,"file":"arrayExt.test.js","sourceRoot":"","sources":["arrayExt.test.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,2BAAyB;AAEzB,KAAK,CAAC,UAAU,EAAE;IAEd,IAAI,OAAiB,CAAC;IACtB,IAAI,OAAiB,CAAC;IACtB,IAAI,KAAY,CAAC;IACjB,IAAI,MAAgB,CAAC;IAErB,IAAI,OAAc,CAAC;IACnB,IAAI,KAAK,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACxC,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACzC,IAAI,KAAK,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACxC,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IAGzC,KAAK,CAAC;QAEF,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACvB,OAAO,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACjD,KAAK,GAAG,EAAE,CAAC;QACX,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAEb,OAAO,GAAG;YACN,MAAM;YACN,KAAK;YACL,KAAK;YACL,MAAM;SACT,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,IAAI,UAAU,GAAG,UAAC,MAAkB,EAAE,QAAoB;QAEtD,EAAE,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QAEhB,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,QAAQ,KAAK,IAAI,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC;QAEjB,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,YAAY,KAAK,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC;QAEjB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC;QAEjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EACtC,CAAC;YACG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC1B,QAAQ,CAAC;YAEb,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC;IAEF,KAAK,CAAC,SAAS,EAAE;QAEb,IAAI,CAAC,sEAAsE,EAAE;YAEzE,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAC9B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yGAAyG,EAAE;YAE5G,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oGAAoG,EAAE;YAEvG,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE;YAEtD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE;YAEtD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE;YAEtD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;YAC3C,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,aAAa,EAAE;QAEjB,IAAI,CAAC,sEAAsE,EAAE;YAEzE,IAAI,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;YACjD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yGAAyG,EAAE;YAE5G,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oGAAoG,EAAE;YAEvG,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE;YAEvD,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE;YAEvD,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE;YAEvD,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;YAChD,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,MAAM,EAAE;QAEV,IAAI,CAAC,sEAAsE,EAAE;YAEzE,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mGAAmG,EAAE;YAEtG,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8FAA8F,EAAE;YAEjG,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6DAA6D,EAAE;YAEhE,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2DAA2D,EAAE;YAE9D,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+DAA+D,EAAE;YAElE,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2DAA2D,EAAE;YAE9D,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2DAA2D,EAAE;YAE9D,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,MAAM,EAAE;QAEV,IAAI,CAAC,sEAAsE,EAAE;YAEzE,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8GAA8G,EAAE;YAEjH,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4FAA4F,EAAE;YAE/F,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oEAAoE,EAAE;YAEvE,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wEAAwE,EAAE;YAE3E,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE;YAEnF,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wEAAwE,EAAE;YAE3E,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wEAAwE,EAAE;YAE3E,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,OAAO,EAAE;QAEX,IAAI,CAAC,2FAA2F,EAAE;YAE9F,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oGAAoG,EAAE;YAEvG,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+FAA+F,EAAE;YAElG,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;YAC5B,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+GAA+G,EAAE;YAElH,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,QAAQ,EAAE;QAEZ,IAAI,CAAC,mEAAmE,EAAE;YAEtE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mEAAmE,EAAE;YAEtE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mEAAmE,EAAE;YAEtE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE;YAE1D,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE;YAEnF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,OAAO,EAAE;QAEX,IAAI,CAAC,iEAAiE,EAAE;YAEpE,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iEAAiE,EAAE;YAEpE,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iEAAiE,EAAE;YAEpE,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE;YAE/D,KAAK,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qEAAqE,EAAE;YAExE,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from \"assert\";\nimport \"../src/arrayExt\";\n\nsuite(\"ArrayExt\", () =>    \n{\n    let numbers: number[];\n    let strings: string[];\n    let empty: any[];\n    let single: number[];\n    \n    let objects: any[];\n    let first = { item: \"item1\", value: 1 };\n    let second = { item: \"item2\", value: 2 };\n    let third = { item: \"item3\", value: 3 };\n    let fourth = { item: \"item4\", value: 4 };\n    \n\n    setup(() =>\n    {\n        numbers = [2, 3, 1, 7];\n        strings = [\"charlie\", \"alpha\", \"india\", \"bravo\"];\n        empty = [];\n        single = [1]; \n        \n        objects = [\n            fourth,\n            first,\n            third,\n            second\n        ];\n    });\n\n    let arrayEqual = (actual: Array<any>, expected: Array<any>) =>\n    {\n        if (actual === expected)\n            return true;\n\n        if (actual === null || expected === null)\n            return false;\n\n        if (!(actual instanceof Array) || !(expected instanceof Array))\n            return false;\n\n        if (actual.length !== expected.length)\n            return false;\n\n        for (let i = 0; i < actual.length; i++)\n        {\n            if (actual[i] === expected[i])\n                continue;\n\n            return false;\n        }\n\n        return true;\n    };\n\n    suite(\"orderBy\", () =>\n    {\n        test(\"should return a new empty array object when target is an empty array\", () =>\n        {\n            let ordered = empty.orderBy();\n            assert.strictEqual(ordered.length, 0);\n            assert.notStrictEqual(ordered, empty);\n        });\n        \n        test(\"should return a new array object of the same length as the target when target is a single element array\", () =>\n        {\n            let ordered = single.orderBy();\n            assert.strictEqual(ordered.length, 1);\n            assert.notStrictEqual(ordered, single);\n        });\n        \n        test(\"should return a new array object of the same length as the target when target is a n element array\", () =>\n        {\n            let ordered = numbers.orderBy();\n            assert.strictEqual(ordered.length, numbers.length);\n            assert.notStrictEqual(ordered, numbers);\n        });\n    \n        test(\"should return array of numbers in ascending order\", () => \n        {\n            let ordered = numbers.orderBy();\n            assert.ok(arrayEqual(ordered, [1, 2, 3, 7]));\n        });\n\n        test(\"should return array of strings in ascending order\", () =>\n        {\n            let ordered = strings.orderBy();\n            assert.ok(arrayEqual(ordered, [\"alpha\", \"bravo\", \"charlie\", \"india\"]));\n        });\n\n        test(\"should return array of objects in ascending order\", () =>\n        {\n            let ordered = objects.orderBy(t => t.item);\n            assert.ok(arrayEqual(ordered, [first, second, third, fourth]));\n        });\n    });\n\n    suite(\"orderByDesc\", () =>\n    {\n        test(\"should return a new empty array object when target is an empty array\", () =>\n        {\n            let ordered = empty.orderByDesc();\n            assert.strictEqual(ordered.length, empty.length);\n            assert.notStrictEqual(ordered, empty);\n        });\n        \n        test(\"should return a new array object of the same length as the target when target is a single element array\", () =>\n        {\n            let ordered = single.orderByDesc();\n            assert.strictEqual(ordered.length, single.length);\n            assert.notStrictEqual(ordered, single);\n        });\n        \n        test(\"should return a new array object of the same length as the target when target is a n element array\", () =>\n        {\n            let ordered = numbers.orderByDesc();\n            assert.strictEqual(ordered.length, numbers.length);\n            assert.notStrictEqual(ordered, numbers);\n        });\n        \n        test(\"should return array of numbers in descending order\", () =>\n        {\n            let ordered = numbers.orderByDesc();\n            assert.ok(arrayEqual(ordered, [7, 3, 2, 1]));\n        });\n\n        test(\"should return array of strings in descending order\", () =>\n        {\n            let ordered = strings.orderByDesc();\n            assert.ok(arrayEqual(ordered, [\"india\", \"charlie\", \"bravo\", \"alpha\"]));\n        });\n\n        test(\"should return array of objects in descending order\", () =>\n        {\n            let ordered = objects.orderByDesc(t => t.value);\n            assert.ok(arrayEqual(ordered, [fourth, third, second, first]));\n        });\n    });\n\n    suite(\"skip\", () =>\n    {\n        test(\"should return a new empty array object when target is an empty array\", () =>\n        {\n            let skipped = empty.skip(0);\n            assert.ok(arrayEqual(skipped, []));\n            assert.notStrictEqual(skipped, empty);\n        });\n        \n        test(\"should return a new array object excluding elements skipped when target is a single element array\", () =>\n        {\n            let skipped = single.skip(1);\n            assert.ok(arrayEqual(skipped, []));\n            assert.notStrictEqual(skipped, single);\n        });\n        \n        test(\"should return a new array object excluding elements skipped when target is a n element array\", () =>\n        {\n            let skipped = numbers.skip(1);\n            assert.ok(arrayEqual(skipped, [3, 1, 7]));\n            assert.notStrictEqual(skipped, numbers);\n        });\n        \n        test(\"should return all array elements when number skipped is < 0\", () =>\n        {\n            let skipped = numbers.skip(-2);\n            assert.ok(arrayEqual(skipped, numbers));\n        });\n        \n        test(\"should return numbers in array excluding elements skipped\", () =>\n        {\n            let skipped = numbers.skip(2);\n            assert.ok(arrayEqual(skipped, [1, 7]));\n        });\n        \n        test(\"should return empty array if number skipped is > array.length\", () =>\n        {\n            let skipped = numbers.skip(7);\n            assert.ok(arrayEqual(skipped, []));\n        });\n\n        test(\"should return strings in array excluding elements skipped\", () =>\n        {\n            let skipped = strings.skip(2);\n            assert.ok(arrayEqual(skipped, [\"india\", \"bravo\"]));\n        });\n\n        test(\"should return objects in array excluding elements skipped\", () =>\n        {\n            let skipped = objects.skip(2);\n            assert.ok(arrayEqual(skipped, [third, second]));\n        });     \n    });\n    \n    suite(\"take\", () =>\n    {\n        test(\"should return a new empty array object when target is an empty array\", () =>\n        {\n            let taken = empty.take(1);\n            assert.ok(arrayEqual(taken, []));\n            assert.notStrictEqual(taken, empty);\n        });\n        \n        test(\"should return a new empty array object when target is a single element array and no elements have been taken\", () =>\n        {\n            let taken = single.take(0);\n            assert.ok(arrayEqual(taken, []));\n            assert.notStrictEqual(taken, single);\n        });\n        \n        test(\"should return a new array object containing element taken when target is a n element array\", () =>\n        {\n            let taken = numbers.take(1);\n            assert.ok(arrayEqual(taken, [2]));\n            assert.notStrictEqual(taken, numbers);\n        });\n        \n        test(\"should return empty array if number taken from target array is < 0\", () =>\n        {\n            let taken = numbers.take(-3);\n            assert.ok(arrayEqual(taken, []));\n        });\n        \n        test(\"should return array of elements taken when target elements are numbers\", () =>\n        {\n            let taken = numbers.take(2);\n            assert.ok(arrayEqual(taken, [2, 3])); \n        });\n        \n        test(\"should return all array elements if number taken from target is > array.length\", () =>\n        {\n            let taken = numbers.take(6);\n            assert.ok(arrayEqual(taken, numbers));\n        });\n        \n        test(\"should return array of elements taken when target elements are strings\", () =>\n        {\n            let taken = strings.take(2);\n            assert.ok(arrayEqual(taken, [\"charlie\", \"alpha\"]));\n        });\n        \n        test(\"should return array of elements taken when target elements are objects\", () =>\n        {\n            let taken = objects.take(2); \n            assert.ok(arrayEqual(taken, [fourth, first]));\n        });\n    });\n    \n    suite(\"count\", () =>\n    {\n        test(\"should return the length of the empty array when called on the target without a predicate\", () =>\n        {\n            let count = empty.count();\n            assert.strictEqual(count, empty.length);\n        });\n        \n        test(\"should return the length of the single element array when called on the target without a predicate\", () =>\n        {\n            let count = single.count();\n            assert.strictEqual(count, single.length);\n        });\n        \n        test(\"should return the length of the n element array when called on the target without a predicate\", () =>\n        {\n            let count = strings.count();\n            assert.strictEqual(count, strings.length);\n        });\n        \n        test(\"should return number of items that satisfy the predicate condition when called on the target with a predicate\", () =>\n        {\n            let count = numbers.count(t => t > 5);\n            assert.strictEqual(count, 1);\n        });        \n    });\n    \n    suite(\"remove\", () =>\n    {\n        test(\"should return array of numbers in target minus removed element(s)\", () =>\n        {\n            numbers.remove(3);\n            assert.ok(arrayEqual(numbers, [2, 1, 7]));     \n        });\n        \n        test(\"should return array of strings in target minus removed element(s)\", () =>\n        {\n            strings.remove(\"alpha\");\n            assert.ok(arrayEqual(strings, [\"charlie\", \"india\", \"bravo\"]));\n        });\n        \n        test(\"should return array of objects in target minus removed element(s)\", () =>\n        {\n            objects.remove(first);\n            assert.ok(arrayEqual(objects, [fourth, third, second]));\n        });\n        \n        test(\"should return false if element is not in target array\", () =>\n        {\n            let removed = numbers.remove(8);\n            assert.strictEqual(removed, false);\n        });\n        \n        test(\"should return empty array if empty array is target and no elements are removed\", () =>\n        {\n            empty.remove(0);\n            assert.ok(arrayEqual(empty, []));\n        });\n    });\n    \n    suite(\"clear\", () =>\n    {\n        test(\"should return empty array if target array of numbers is cleared\", () =>\n        {\n            numbers.clear();\n            assert.ok(arrayEqual(numbers, []));\n        });\n        \n        test(\"should return empty array if target array of strings is cleared\", () =>\n        {\n            strings.clear(); \n            assert.ok(arrayEqual(strings, []));\n        });\n        \n        test(\"should return empty array if target array of objects is cleared\", () =>\n        {\n            objects.clear();\n            assert.ok(arrayEqual(objects, []));\n        });\n        \n        test(\"should return empty array if empty target array is cleared\", () =>\n        {\n            empty.clear();\n            assert.ok(arrayEqual(empty, []));\n        });\n        \n        test(\"should return empty array if single element target array is cleared\", () =>\n        {\n            single.clear();\n            assert.ok(arrayEqual(single, []));\n        });\n    });\n});"]}